//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
Список сервисов и инструментов, библиотек, полезных в работе:
Three.js
Peer.js
jQuery

Emscripten - транслятор C++ -> JS.
ESLint - инструмент проверки кода на ошибки.

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
Использовать для текста отдельные <div>, <span> элементы. Иначе при записи портятся элементы и их обработчики;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
При использовании AJAX использоваться параметр request.setRequestHeader("Content-Type", "Some_Content_Type"),
вместо Some_Content_Type использовать application/x-www-form-urlencoded, application/json;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DOM: Чтобы менять дочерние элементы стоит использовать добавление текущего дочернего элемента в другой (допустим,
в body) после чего осуществлять добавление в целевой нужного нам элемента:
  document.body.appendChild(PrevElement);// убираем элемент из DescriptionDiv в body.
  DescriptionDiv.appendChild(CurrentElement);// добавляем в Description новый элемент.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
Collada .dae не может хранить символы &;. и одни цифры!
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
Создаваемым через document.createElement объектам устанавливать свойства чере setAttribute:
var unit_div = document.createElement("div");
unit_div.setAttribute("class", "lesson_part_unit_div clear_fix");
////////////////////////////////////////////////////////////////////////////////////////////
Three.js ColladaLoader возвращает объект коллада, в котором объекты и материалы хранятся в разных частях.
Объекты можно вытащить из collada_obj.scene - они все там.
Материалы хранятся в collada_obj.dae.materials!!!!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
В JavaScript объект удаляется, только когда удаляется последняя ссылка на него!!!!
Поэтому все временные объекты создавать и хранить непосредственно в массивах! И удалять их затем оттуда. К примеру == null
============================================================================================================================
		VK.api("users.get", {"user_ids": ids_str}, function (data) {
			// действия с полученными данными
  		data.response - работать с ним
		/// данные лежат в data.response[0].first_name .. и тд
		});
//////////////////////////////////////////////////////////////////////////////////////
Three.js Для нормальной работы с Collada (.dae) нужно использовать ColladaLoader2;
//////////////////////////////////////////////////////////////////////////////////////
Node.js При установке модуля нужно находиться в папке проекта, в котором мы работаем;
к примеру:
var PeerServer = require("peer").PeerServer;
то для установки модуля peer нужно делать npm install peer в директории, в которой лежит фаил, из которого
мы делаем require("peer");
//////////////////////////////////////////////////////////////////////////////////////
!!!!!!!!!!!Очередная странность языка Javascript!!!!!!!!
// ВОТ ЭТОТ КОД НЕ РАБОТАЛ!!!
_QBorgGame.prototype.updateGameProcess = function ()
{
	this.Renderer.render(this.Scene, this.Camera);
	this.LocalPlayer.update();
	for(i=0;i<this.RemotePlayers.length; i++)
	{
		this.RemotePlayers[i].update();
	}
	requestAnimationFrame(this.updateGameProcessBF);
}
// НО РАБОТАЕТ ВОТ ЭТО:
_QBorgGame.prototype.updateGameProcess = function ()
{
		this.Renderer.render(this.Scene, this.Camera);
		this.LocalPlayer.update();
                this.updateRemotePlayers();
	  requestAnimationFrame(this.updateGameProcessBF);
}

_QBorgGame.prototype.updateRemotePlayers = function ()
{
	  for(var i=0;i<this.RemotePlayers.length; i++)
	  {
	    this.RemotePlayers[i].update();
	  }
}
ВЫВОД: В Javascript ВСЕ ПЕРЕМЕННЫЕ НУЖНО ОБЪЯВЛЯТЬ С var!!!! Иначе - они считаются глобальными!...
